:plugin: prometheus
:type: output
:default_codec: plain
// Update header with plugin name and default codec

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Prometheus output plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

This logstash output plugin exposes an endpoint for https://prometheus.io/[Prometheus] to scrape.

Use cases include but are not limited to:
* Monitoring the time it takes for your logging pipeline to reach logstash
* Reusing your logging pipeline for exposing metrics
* Tracking the health of your data

[id="plugins-{type}s-{plugin}-options"]
==== Example Output Configuration Options

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-decrement>> |<<hash>>|No
| <<plugins-{type}s-{plugin}-increment>> |<<hash>>|No
| <<plugins-{type}s-{plugin}-port>> |<<numer>>|No
| <<plugins-{type}s-{plugin}-set>> |<<hash>>|No
| <<plugins-{type}s-{plugin}-timer>> |<<hash>>|No
|=======================================================================

[id="plugins-{type}s-{plugin}-decrement"]
===== `decrement`

  * Value type is <<hash>>
  * Default value is `{}`
  * Default decrement by value is `1`

Decrement can be used to decrement a gauge. No other types are supported.

Example:
[source,ruby]
----------------------------------
decrement => {
    negaevents_total => {
        description => "This is my test gauge"
        labels => {
            mylabel => "%{[message]}"
        }
        by => "1"
    }
}
----------------------------------

[id="plugins-{type}s-{plugin}-increment"]
===== `increment`

  * Value type is <<hash>>
  * Default value is `{}`
  * Default type of metric is a `counter`
  * Default increment by value is `1`

Increment either a gauge or a counter.

Example of a `counter`:
[source,ruby]
----------------------------------
increment => {
    events_count => {
        description => "This is my test gauge"
        labels => {
            mylabel => "%{[message]}"
        }
        by => "1"
    }
}
----------------------------------

Example of a `gauge`:
[source,ruby]
----------------------------------
increment => {
    events_total => {
        description => "This is my test gauge"
        labels => {
            mylabel => "%{[message]}"
        }
        by => "5"
        type => "gauge"
    }
}
----------------------------------

[id="plugins-{type}s-{plugin}-port"]
===== `port`

  * Value type is <<number>>
  * Default value is `9640`

The port that will be used when exposing a metric name.
With a default port of 9640, Prometheus should be scraping from `https://<yourlogstash>:9640/metrics`

[id="plugins-{type}s-{plugin}-host"]
===== `host`

  * Value type is <<string>>
  * Default value is `0.0.0.0`

The host that will be used to listen.

[id="plugins-{type}s-{plugin}-set"]
===== `set`

  * Value type is <<hash>>
  * Default value is `{}`

Set can be used to set a gauge to a specific value. No other types are supported.

Example:
[source,ruby]
----------------------------------
set => {
    events_total => {
        description => "This is my test gauge"
        labels => {
            mylabel => "%{[message]}"
        }
        value => "123"
    }
}
----------------------------------

[id="plugins-{type}s-{plugin}-timer"]
===== `timer`

  * Value type is <<hash>>
  * Default value is `{}`
  * Default type of metric is a `summary`

Observe timing data for a histogram or summary.
Histograms are recommended, but require setting the `buckets`
Summaries will only expose a sum and count, quantile summaries are not supported.
Read https://prometheus.io/docs/practices/histograms/[best practices for summaries and histograms] for more information.

Example of a `histogram`:
[source,ruby]
----------------------------------
histogramtest => {
  description => "This is my histogram"
  value => "%{[timer]}"
  labels => {
    mylabel => "%{[message]}"
  }
  type => "histogram"
  buckets => [0.1, 1, 5, 10]
}
----------------------------------

Example of a `summary`:
[source,ruby]
----------------------------------
summarytest => {
  description => "This is my summary"
  value => "%{[timer]}"
  labels => {
    mylabel => "%{[message]}"
  }
}
----------------------------------

[id="plugins-{type}s-{plugin}-further-reading"]

==== Best Practices & Further Reading

https://www.robustperception.io/how-should-pipelines-be-monitored
https://www.robustperception.io/putting-queues-in-front-of-prometheus-for-reliability

// The full list of Value Types is here:
// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]

:default_codec!:
